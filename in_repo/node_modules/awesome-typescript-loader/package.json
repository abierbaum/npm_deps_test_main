{
  "_args": [
    [
      "awesome-typescript-loader@https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-0.16.2.tgz",
      "/home/allenb/Source/npm_deps_test_main/in_repo"
    ]
  ],
  "_from": "awesome-typescript-loader@>=0.16.2 <0.17.0",
  "_id": "awesome-typescript-loader@0.16.2",
  "_inCache": true,
  "_location": "/awesome-typescript-loader",
  "_phantomChildren": {},
  "_requested": {
    "name": "awesome-typescript-loader",
    "raw": "awesome-typescript-loader@https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-0.16.2.tgz",
    "rawSpec": "https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-0.16.2.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-0.16.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-0.16.2.tgz",
  "_shasum": "7fec218c83a825f9db941b8636d4680537679c60",
  "_shrinkwrap": null,
  "_spec": "awesome-typescript-loader@https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-0.16.2.tgz",
  "_where": "/home/allenb/Source/npm_deps_test_main/in_repo",
  "author": {
    "email": "fnight.m@gmail.com",
    "name": "Stanislav Panferov",
    "url": "http://panferov.me/"
  },
  "bugs": {
    "url": "https://github.com/s-panferov/awesome-typescript-loader/issues"
  },
  "dependencies": {
    "babel-polyfill": "^6.1.19",
    "colors": "^1.1.2",
    "enhanced-resolve": "^0.9.1",
    "es6-promisify": "^3.0.0",
    "loader-utils": "^0.2.6",
    "lodash": "^3.10.1",
    "object-assign": "^2.1.1",
    "parse-json": "^2.2.0",
    "source-map-support": "^0.4.0",
    "strip-bom": "^2.0.0",
    "strip-json-comments": "^2.0.0",
    "tsconfig": "^2.1.1"
  },
  "description": "Awesome TS loader for webpack",
  "devDependencies": {
    "babel-cli": "^6.3.17",
    "babel-preset-es2015": "^6.1.2",
    "babel-preset-es2015-node4": "^1.0.0",
    "babel-preset-stage-2": "^6.1.2",
    "bluebird": "^3.3.3",
    "chai": "^3.5.0",
    "git-hooks": "0.0.10",
    "grunt": "^0.4.5",
    "grunt-bump": "^0.3.1",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-copy": "^0.7.0",
    "grunt-conventional-changelog": "^1.2.1",
    "grunt-shell": "^1.1.2",
    "grunt-ts": "^3.0.0",
    "load-grunt-tasks": "^0.6.0",
    "mkdirp": "^0.5.1",
    "mocha": "^2.3.4",
    "ps-node": "0.0.5",
    "rimraf": "^2.5.0",
    "tslint": "3.5.0-dev.1",
    "typescript": "^1.9.0-dev.20160319",
    "webpack": "^1.12.12",
    "webpack-dev-server": "^1.14.1"
  },
  "homepage": "https://github.com/s-panferov/awesome-typescript-loader",
  "keywords": [
    "webpack",
    "loader",
    "webpack-loader",
    "typescript"
  ],
  "license": "MIT",
  "main": "dist.babel/index.js",
  "name": "awesome-typescript-loader",
  "optionalDependencies": {},
  "readme": "# The best TypeScript loader for Webpack\n\n[![Join the chat at https://gitter.im/s-panferov/awesome-typescript-loader](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/s-panferov/awesome-typescript-loader?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://travis-ci.org/s-panferov/awesome-typescript-loader.svg?branch=master)](https://travis-ci.org/s-panferov/awesome-typescript-loader)\n\nTypeScript loader for Webpack. This project was started as a fork of https://github.com/andreypopp/typescript-loader.\nThanks @andreypopp for the great project.\n\nThe main goal of this loader is to support the **watch** mode and *webpack-dev-server* with **incremental** compilation.\nAlso there are a lot of problems in other TypeScript loaders that were fixed here.\n\n## Installation\n\n```\nnpm install awesome-typescript-loader --save-dev\n```\n\n## Configuration\n\n1. Add `.ts` as a resolvable extension.\n2. Configure all files with a `.ts` extension to be handled by `awesome-typescript-loader`.\n\n**webpack.config.js**\n\n```javascript\nmodule.exports = {\n\n  // Currently we need to add '.ts' to resolve.extensions array.\n  resolve: {\n    extensions: ['', '.ts', '.webpack.js', '.web.js', '.js']\n  },\n\n  // Source maps support (or 'inline-source-map' also works)\n  devtool: 'source-map',\n\n  // Add loader for .ts files.\n  module: {\n    loaders: [\n      {\n        test: /\\.ts$/,\n        loader: 'awesome-typescript-loader'\n      }\n    ]\n  }\n};\n```\n\nAfter that, you would be able to build TypeScript files with webpack.\n\n## TS defaults\n\n* target = 'es5'\n\n## tsconfig.json\n\nYou can use tsconfig.json file to configure your compiler and loader:\n\n```\n{\n    \"compilerOptions\": {\n        \"noImplicitAny\": true,\n        \"removeComments\": true,\n    },\n    \"awesomeTypescriptLoaderOptions\": {\n        /* ... */\n    }\n}\n```\n\n## Loader options\n\n### compiler *(string) (default='typescript')*\n\nAllows use of TypeScript compilers other than the official one. Should be\nset to the NPM name of the compiler, e.g. *ntypescript* or path to a `tsc` file.\nNote that the compiler must be installed in **your** project. You can also use\nnightly versions.\n\n### emitRequireType *(boolean) (default=true)*\n\nSpecify whether or not the loader emits webpacks's require type. You might use `emitRequireType=false` with Node, because it already has own require type in `node.d.ts` file.\n\n### library *(string) (default='es5' possible='es6')*\n\nAllows use of library other than the `target`'s default one. Useful when you want to use ES6 library with ES5 target. Also you might use `library=es6` with Node.\n\n### instanceName *(string) (default='default')*\n\nAllows to use several TypeScript compilers with different settings in one app. Just override `instanceName` to initialize another instance.\n\n### reEmitDependentFiles *(boolean) (default=false')*\n\nCollect files dependency graph and re-emit all dependent files along with changed file.\n\n### tsconfig *(string) (default='tsconfig.json')*\n\nSpecify path to a TS config file. Useful when you have multiple config files. This setting is useless *inside* TS config file.\n\n### useWebpackText *(boolean) (default=false)*\n\nUse this setting to force loader to use webpack's way to load files. Useful only with ts-jsx-loader. Builds may become slower.\n\n### externals *(array)*\n\nArray of paths to .d.ts files that must be included in program. Useful with `rewriteImports`.\n\n### doTypeCheck *(boolean) (default=true)*\n\nUse this setting to disable type checking if you want.\n\n### forkChecker *(boolean) (default=false)*\n\nDo type checking in a separate process, so webpack don't need to wait. **Significantly** improves development workflow with tools like [react-hot-loader](https://github.com/gaearon/react-hot-loader).\n\nWorks only with `ForkCheckerPlugin`:\n\n```js\nvar ForkCheckerPlugin = require('awesome-typescript-loader').ForkCheckerPlugin;\n\nplugins: [\n    new ForkCheckerPlugin(),\n]\n```\n\n### forkCheckerSilent *(boolean) (default=false)*\n\nLess logging from the checker.\n\n### useBabel *(boolean) (default=false)*\n\nInvoke Babel to transpile files. Useful with ES6 target.\n\n### usePrecompiledFiles *(boolean) (default=false)*\n\nUse pre-compiled files if any. Files must be named as `{filename}.js` and `{filename}.map`.\n\n### useCache *(boolean) (default=false)*\n\nUse internal file cache. Useful with Babel, when processing takes a long time to complete. Improves warm-up time.\n\n### cacheDirectory *(string) (default='.awcache')*\n\nDirectory when cache is stored.\n\n### resolveGlobs *(string) (default=true)*\n\nInvoke glob resolver using 'filesGlob' and 'exclude' sections of `tsconfig`.\n\n## Compiler options\n\nYou can pass compiler options inside loader query string or in tsconfig file.\n\n## Using with --watch or webpack-dev-server\n\nThis loader has support of both `--watch` and `webpack-dev-server` modes. It handles file dependencies\nusing internal webpack dependency markers. When you change a file, the loader recompiles all the dependencies.\n\n## External Modules\n\nThe most natural way to structure your code with TypeScript and webpack is to use [external modules](https://github.com/Microsoft/TypeScript/wiki/Modules#going-external), and these work as you would expect.\n\n```\nnpm install --save react\n```\n\n```typescript\nimport * as React from 'react';\n```\n\n## Internal Modules\n\nThis project doesn't aim to support internal modules, because it's hard to resolve dependencies for the watch\nmode if you use such modules. Of course, you can still use them without watch, but this function is **unstable**.\n\n## Declaration files\n\nAll declaration files should be resolvable from the entry file.\nThe easiest way to do this is to create a `references.d.ts` file which contains\nreferences to all of your declaration files. Then reference\n`references.d.ts` from your entry file.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/s-panferov/awesome-typescript-loader.git"
  },
  "scripts": {
    "babel": "babel dist --presets es2015 --out-dir dist.babel --watch --source-maps",
    "babel-compile": "babel dist --presets es2015 --out-dir dist.babel --source-maps",
    "build": "npm run grunt && npm run babel-compile",
    "grunt": "grunt",
    "lint": "tslint src/*.ts",
    "prepublish": "grunt",
    "test": "mocha dist.babel/test"
  },
  "version": "0.16.2"
}
