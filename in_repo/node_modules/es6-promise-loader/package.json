{
  "_args": [
    [
      "es6-promise-loader@https://registry.npmjs.org/es6-promise-loader/-/es6-promise-loader-1.0.1.tgz",
      "/home/allenb/Source/npm_deps_test_main/in_repo"
    ]
  ],
  "_from": "es6-promise-loader@>=1.0.1 <2.0.0",
  "_id": "es6-promise-loader@1.0.1",
  "_inCache": true,
  "_location": "/es6-promise-loader",
  "_phantomChildren": {},
  "_requested": {
    "name": "es6-promise-loader",
    "raw": "es6-promise-loader@https://registry.npmjs.org/es6-promise-loader/-/es6-promise-loader-1.0.1.tgz",
    "rawSpec": "https://registry.npmjs.org/es6-promise-loader/-/es6-promise-loader-1.0.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/es6-promise-loader/-/es6-promise-loader-1.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/es6-promise-loader/-/es6-promise-loader-1.0.1.tgz",
  "_shasum": "6caa12dc0b9850f73c0cca8b7fd92a898223ebb5",
  "_shrinkwrap": null,
  "_spec": "es6-promise-loader@https://registry.npmjs.org/es6-promise-loader/-/es6-promise-loader-1.0.1.tgz",
  "_where": "/home/allenb/Source/npm_deps_test_main/in_repo",
  "author": {
    "email": "patrick@angularclass.com",
    "name": "Patrick Stapleton"
  },
  "bugs": {
    "url": "https://github.com/gdi2290/es6-promise-loader/issues"
  },
  "dependencies": {},
  "description": "a webpack bundle-loader with ES6 promise interface",
  "devDependencies": {},
  "homepage": "https://github.com/gdi2290/es6-promise-loader#readme",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "name": "es6-promise-loader",
  "optionalDependencies": {},
  "readme": "## A sister of [bundle-loader](https://github.com/webpack/bundle-loader) with promise API\r\n## A sister of [promise-loader](https://github.com/gaearon/promise-loader) with promise API\r\n\r\n### ES6 Promise Loader\r\n\r\n[Documentation: Using loaders](http://webpack.github.io/docs/using-loaders.html)\r\n\r\nIt only implements so-called `lazy` `bundle-loader` mode—that is, `require` returns a function that, when invoked, returns a promise that resolves to the module.\r\n\r\n`require: (string) -> () -> Promise<module>`\r\n\r\nIt's up to you to specify your Promise library of choice as a parameter.\r\n\r\n``` javascript\r\n// Assuming you use Bluebird\r\nvar load = require(\"promise?bluebird!./file.js\");\r\n\r\n// The chunk is not requested until you call the load function\r\nload(namespace).then(function(file) {\r\n\r\n});\r\n```\r\n\r\nIf a promise library is already loaded externally you can specify 'global'.\r\n\r\n\r\nYou can optionally specify [a name for your chunk](http://webpack.github.io/docs/code-splitting.html#named-chunks) after a comma:\r\n\r\n```javascript\r\nvar load = require(\"promise?bluebird,editor!./editor.js\");\r\n```\r\n\r\nThis can be useful for [single-page apps](http://webpack.github.io/docs/optimization.html#single-page-app) because you can later extract filenames from [Webpack-generated stats](https://github.com/webpack/docs/wiki/node.js-api#stats) and pre-load specific bundles if you know user's going to hit them.\r\n\r\nThe bundle name may include `[filename]`, which will be replaced with the filename, and `[name]`, which omits the extension. This is useful for when you want to configure loaders in Webpack configuration without specifying precise filenames—for example, by a suffix:\r\n\r\n```javascript\r\n{\r\n  test: /\\.i18n\\.json$/,\r\n  loader: 'promise?global,[name].i18n'\r\n}\r\n```\r\n\r\n### License\r\n\r\nMIT (http://www.opensource.org/licenses/mit-license.php)\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/gdi2290/es6-promise-loader.git"
  },
  "version": "1.0.1"
}
