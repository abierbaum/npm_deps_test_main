{
  "_args": [
    [
      "ts-node@https://registry.npmjs.org/ts-node/-/ts-node-0.7.3.tgz",
      "/home/allenb/Source/npm_deps_test_main/in_repo"
    ]
  ],
  "_from": "ts-node@>=0.7.0 <0.8.0",
  "_id": "ts-node@0.7.3",
  "_inCache": true,
  "_location": "/ts-node",
  "_phantomChildren": {},
  "_requested": {
    "name": "ts-node",
    "raw": "ts-node@https://registry.npmjs.org/ts-node/-/ts-node-0.7.3.tgz",
    "rawSpec": "https://registry.npmjs.org/ts-node/-/ts-node-0.7.3.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/ts-node/-/ts-node-0.7.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/ts-node/-/ts-node-0.7.3.tgz",
  "_shasum": "65fa538e538dedf16b64d806f147cee996276620",
  "_shrinkwrap": null,
  "_spec": "ts-node@https://registry.npmjs.org/ts-node/-/ts-node-0.7.3.tgz",
  "_where": "/home/allenb/Source/npm_deps_test_main/in_repo",
  "author": {
    "email": "hello@blakeembrey.com",
    "name": "Blake Embrey",
    "url": "http://blakeembrey.me"
  },
  "bin": {
    "ts-node": "dist/bin/ts-node.js"
  },
  "bugs": {
    "url": "https://github.com/TypeStrong/ts-node/issues"
  },
  "dependencies": {
    "arrify": "^1.0.0",
    "chalk": "^1.1.1",
    "diff": "^2.1.1",
    "make-error": "^1.1.1",
    "minimist": "^1.2.0",
    "source-map-support": "^0.4.0",
    "xtend": "^4.0.0"
  },
  "description": "TypeScript execution environment and REPL for node",
  "devDependencies": {
    "chai": "^3.0.0",
    "istanbul": "^0.4.0",
    "mocha": "^2.1.0",
    "ntypescript": "^1.201507091536.1",
    "proxyquire": "^1.7.2",
    "tslint": "^3.2.1",
    "typescript": "^1.8.10",
    "typings": "^0.8.0"
  },
  "files": [
    "dist/",
    "typings.js",
    "register.js",
    "LICENSE"
  ],
  "homepage": "https://github.com/TypeStrong/ts-node",
  "keywords": [
    "typescript",
    "node",
    "runtime",
    "environment",
    "ts",
    "compiler"
  ],
  "license": "MIT",
  "main": "dist/ts-node.js",
  "name": "ts-node",
  "optionalDependencies": {},
  "preferGlobal": true,
  "readme": "# TypeScript Node\n\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][downloads-image]][downloads-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n\n> TypeScript execution environment and REPL for node. **Works with `typescript@>=1.5`**.\n\n## Installation\n\n```sh\nnpm install -g ts-node\n\n# Install a TypeScript compiler (requires `typescript` by default).\nnpm install -g typescript\n```\n\n## Features\n\n* Execute TypeScript files with node\n* Interactive REPL\n* Execute (and print) TypeScript through the CLI\n* Uses source maps\n* Loads from `tsconfig.json`\n\n## Usage\n\n```sh\n# Execute a script as you world normally with `node`.\nts-node script.ts\n\n# Starts the TypeScript REPL.\nts-node\n\n# Execute code with TypeScript.\nts-node -e 'console.log(\"Hello, world!\")'\n\n# Execute, and print, code with TypeScript.\nts-node -p '\"Hello, world!\"'\n\n# Pipe scripts to execute with TypeScript.\necho \"console.log('Hello, world!')\" | ts-node\n```\n\n![TypeScript REPL](https://github.com/TypeStrong/ts-node/raw/master/screenshot.png)\n\n### Mocha\n\n```sh\nmocha --require ts-node/register [...args]\n```\n\n### Tape\n\n```sh\nts-node node_modules/tape/bin/tape [...args]\n```\n\n### Gulp\n\n```sh\n# Just create a `gulpfile.ts` and run `gulp`.\ngulp\n```\n\n### Loading `tsconfig.json`\n\n**Typescript Node** uses `tsconfig.json` automatically, use `-n` to skip loading `tsconfig.json`.\n\n### Configuration Options\n\nYou can set options by passing them in before the script.\n\n```sh\nts-node --compiler ntypescript --project src --ignoreWarnings 2304 hello-world.ts\n```\n\n* **--project, -P** Location to resolve `tsconfig.json` from (also `process.env.TS_NODE_PROJECT`)\n* **--noProject, -n** Disable loading `tsconfig.json` (also `process.env.TS_NODE_NO_PROJECT`)\n* **--compiler, -c** Use a custom, require-able TypeScript compiler compatible with `typescript@>=1.5.0-alpha` (also `process.env.TS_NODE_COMPILER`)\n* **--ignoreWarnings, -i** Set an array of TypeScript diagnostic codes to ignore (also `process.env.TS_NODE_IGNORE_WARNINGS`)\n* **--disableWarnings, -d** Ignore all TypeScript errors (also `process.env.TS_NODE_DISABLE_WARNINGS`)\n\n### Programmatic Usage\n\n```js\nrequire('ts-node').register({ /* options */ })\n\n// Or using the shortcut file.\nrequire('ts-node/register')\n```\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/ts-node.svg?style=flat\n[npm-url]: https://npmjs.org/package/ts-node\n[downloads-image]: https://img.shields.io/npm/dm/ts-node.svg?style=flat\n[downloads-url]: https://npmjs.org/package/ts-node\n[travis-image]: https://img.shields.io/travis/TypeStrong/ts-node.svg?style=flat\n[travis-url]: https://travis-ci.org/TypeStrong/ts-node\n[coveralls-image]: https://img.shields.io/coveralls/TypeStrong/ts-node.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/TypeStrong/ts-node?branch=master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/TypeStrong/ts-node.git"
  },
  "scripts": {
    "build": "npm run build-ts",
    "build-ts": "rm -rf dist && tsc",
    "lint": "tslint \"src/**/*.ts\"",
    "prepublish": "typings install && npm run build",
    "test": "npm run build && npm run lint && npm run test-cov",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- dist/**/*.spec.js -R spec --bail",
    "test-spec": "mocha dist/**/*.spec.js -R spec --bail"
  },
  "version": "0.7.3"
}
